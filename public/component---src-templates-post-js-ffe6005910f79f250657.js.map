{"version":3,"sources":["webpack:///./src/templates/post.js","webpack:///./src/static_queries/useBlogData.js"],"names":["Post","props","data","markdownRemark","frontmatter","html","timeToRead","wordCount","fields","console","log","allBlogData","useBlogData","nextPost","slug","map","post","node","indexOf","undefined","getNextPost","prevPost","length","getPrevPost","page","title","oGraphUrl","hero_image","publicURL","className","fluid","childImageSharp","alt","kicker","date","words","id","dangerouslySetInnerHTML","__html","to","getPostData","useStaticQuery","allMarkdownRemark","edges"],"mappings":"8FAAA,0LAQe,SAASA,EAAKC,GAAQ,IAAD,EAO9BA,EAAMC,KAAKC,eALbC,EAFgC,EAEhCA,YACAC,EAHgC,EAGhCA,KACAC,EAJgC,EAIhCA,WACAC,EALgC,EAKhCA,UACAC,EANgC,EAMhCA,OAGFC,QAAQC,IAAIN,GACZ,IAAMO,EAAcC,cACdC,EAGN,SAAqBC,GACnB,IAAMD,EACJF,EACEA,EACGI,KAAI,SAAAC,GACH,OAAOA,EAAKC,KAAKT,OAAOM,QAEzBI,QAAQJ,GAAQ,GAEvB,OAAID,QAA0CM,IAA9BN,EAASI,KAAKT,OAAOM,KAC5BD,EAEAF,EAAY,GAfNS,CAAYZ,EAAOM,MAC9BO,EAkBN,SAAqBP,GACnB,IAAMO,EACJV,EACEA,EACGI,KAAI,SAAAC,GACH,OAAOA,EAAKC,KAAKT,OAAOM,QAEzBI,QAAQJ,GAAQ,GAEvB,OAAIO,QAA0CF,IAA9BE,EAASJ,KAAKT,OAAOM,KAC5BO,EAEAV,EAAYA,EAAYW,OAAS,GA9B3BC,CAAYf,EAAOM,MAkCpC,OACE,YAAC,IAAD,CACEU,KAAK,OACLC,MAAOrB,EAAYqB,MACnBC,UAAWtB,EAAYuB,WAAWC,UAClCd,KAAMN,EAAOM,MAEb,2BACE,mBAAKe,UAAU,0DACb,0BACE,YAAC,IAAD,CACEC,MAAO1B,EAAYuB,WAAWI,gBAAgBD,MAC9CE,IAAK5B,EAAYqB,SAIrB,uBACE,kBAAII,UAAU,8BAA8BzB,EAAYqB,OACxD,kBAAII,UAAU,6BAA6BzB,EAAY6B,QACvD,mBAAKJ,UAAU,oCACZzB,EAAY8B,KADf,MAC6B5B,EAD7B,iBAC4D,IACzDC,EAAU4B,MAFb,WAKF,mBACEC,GAAG,WACHP,UAAU,oCACVQ,wBAAyB,CAAEC,OAAQjC,KAErC,mBAAKwB,UAAU,4CACZR,GACC,YAAC,IAAD,CAAMkB,GAAE,GAAKlB,EAASJ,KAAKT,OAAOM,MAAlC,KACUO,EAASJ,KAAKb,YAAYqB,OAIrCZ,GACC,YAAC,IAAD,CAAM0B,GAAE,GAAK1B,EAASI,KAAKT,OAAOM,MAC/BD,EAASI,KAAKb,YAAYqB,MAD7B,SAOR,mBAAKI,UAAU,6EACb,YAAC,IAAD,QAQD,IAAMW,EAAW,c,kCC3GxB,kDAEe,SAAS5B,IAqCtB,OApCa6B,YAAe,cAoChBC,kBAAkBC","file":"component---src-templates-post-js-ffe6005910f79f250657.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/Layout\"\nimport { graphql, Link } from \"gatsby\"\nimport useBlogData from \"../static_queries/useBlogData\"\nimport SignUpForm from \"./../components/SignUpForm\"\n\nimport Img from \"gatsby-image\"\n\nexport default function Post(props) {\n  const {\n    frontmatter,\n    html,\n    timeToRead,\n    wordCount,\n    fields,\n  } = props.data.markdownRemark\n\n  console.log(frontmatter)\n  const allBlogData = useBlogData()\n  const nextPost = getNextPost(fields.slug)\n  const prevPost = getPrevPost(fields.slug)\n\n  function getNextPost(slug) {\n    const nextPost =\n      allBlogData[\n        allBlogData\n          .map(post => {\n            return post.node.fields.slug\n          })\n          .indexOf(slug) + 1\n      ]\n    if (nextPost && nextPost.node.fields.slug !== undefined) {\n      return nextPost\n    } else {\n      return allBlogData[0]\n    }\n  }\n\n  function getPrevPost(slug) {\n    const prevPost =\n      allBlogData[\n        allBlogData\n          .map(post => {\n            return post.node.fields.slug\n          })\n          .indexOf(slug) - 1\n      ]\n    if (prevPost && prevPost.node.fields.slug !== undefined) {\n      return prevPost\n    } else {\n      return allBlogData[allBlogData.length - 1]\n    }\n  }\n\n  return (\n    <Layout\n      page=\"post\"\n      title={frontmatter.title}\n      oGraphUrl={frontmatter.hero_image.publicURL}\n      slug={fields.slug}\n    >\n      <article>\n        <div className=\"py-20 w-full md:px-10 lg:px-20 max-w-screen-xl mx-auto\">\n          <figure>\n            <Img\n              fluid={frontmatter.hero_image.childImageSharp.fluid}\n              alt={frontmatter.title}\n            />\n          </figure>\n\n          <div>\n            <h1 className=\"text-6xl font-display pt-2\">{frontmatter.title}</h1>\n            <h2 className=\"font-sans text-2xl italic\">{frontmatter.kicker}</h2>\n            <div className=\"font-sans uppercase text-xs py-2\">\n              {frontmatter.date} &bull; {timeToRead} minute read &bull;{\" \"}\n              {wordCount.words} words\n            </div>\n          </div>\n          <div\n            id=\"postHtml\"\n            className=\"text-l font-serif leading-8 my-10\"\n            dangerouslySetInnerHTML={{ __html: html }}\n          ></div>\n          <div className=\"w-full flex justify-between items-center\">\n            {prevPost && (\n              <Link to={`${prevPost.node.fields.slug}`}>\n                &larr; {prevPost.node.frontmatter.title}\n              </Link>\n            )}\n\n            {nextPost && (\n              <Link to={`${nextPost.node.fields.slug}`}>\n                {nextPost.node.frontmatter.title} &rarr;\n              </Link>\n            )}\n          </div>\n        </div>\n      </article>\n      <div className=\"bg-seashell w-4/5 md:w-3/5 xl:w-2/5 p-10 mb-20 mx-auto rounded font-serif\">\n        <SignUpForm />\n      </div>\n    </Layout>\n  )\n}\n\n//dynamic page query, must occur within each post context\n//$slug is made available by context from createPages call in gatsby-node.js\nexport const getPostData = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        author\n        date(formatString: \"MMMM Do, YYYY\")\n        kicker\n        hero_image {\n          childImageSharp {\n            fluid(maxWidth: 1500) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n          publicURL\n        }\n      }\n      excerpt\n      html\n      timeToRead\n      wordCount {\n        words\n      }\n    }\n  }\n`\n","import { graphql, useStaticQuery } from \"gatsby\"\n\nexport default function useBlogData() {\n  const data = useStaticQuery(graphql`\n    query getBlogData {\n      allMarkdownRemark(\n        filter: { frontmatter: { posttype: { in: [\"post\"] } } }\n      ) {\n        edges {\n          node {\n            id\n            html\n            excerpt(pruneLength: 200)\n            frontmatter {\n              author\n              date(formatString: \"MMMM Do, YYYY\")\n              title\n              kicker\n              hero_image {\n                childImageSharp {\n                  fluid(maxWidth: 800) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            timeToRead\n            wordCount {\n              words\n            }\n\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `)\n  return data.allMarkdownRemark.edges\n}\n"],"sourceRoot":""}