<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rezac.dev's RSS Feed]]></title><description><![CDATA[Full Stack Software Engineer]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 11 Nov 2020 01:07:31 GMT</lastBuildDate><item><title><![CDATA[Setting Up Gatsby for Social Media Optimization]]></title><description><![CDATA[<p>Optimizing a page or post for social sharing helps your content stand out in a social media feed.</p>]]></description><link>https://www.rezac.dev/frontend/setting-up-gatsby-for-social-media-optimization/</link><guid isPermaLink="false">https://www.rezac.dev/frontend/setting-up-gatsby-for-social-media-optimization/</guid><pubDate>Sun, 08 Nov 2020 20:00:00 GMT</pubDate><content:encoded>
Whether you are writing content for your own portfolio or developing a website for a client, websites are essentially marketing collateral. Therefore, all websites implicitly have a goal of attracting the right audience for whatever it is they&apos;re marketing.

I&apos;m transitioning into full-stack web developer roles now, but in my current career station, I&apos;m a mid-career digital marketer. As I&apos;ve learned Javascript and Ruby, I&apos;m often surprised by how little about optimization for search engines and social sharing are part of tutorials.

For example, when I worked on [Daily Practice](https://www.rezac.dev/projects/daily-practice &quot;Daily Practice&quot;), my mindful journalling app built in Sinatra, I had to figure out how to pass a title meta tag to the template for the various pages of my site, because it felt too weird to me to leave it out.

SEO (search engine optimization) helps ensure that your page gets some share of voice for relevant search terms. That&apos;s fairly easy when someone knows who or what brand they are looking for – say &quot;Jess Rezac&quot; – and a little more challenging when someone only knows the need they&apos;re looking to have solved – say &quot;Web Developer near me.&quot;

Optimizing a page for social sharing is more about creating the aesthetic or brand that you desire so that your content stands out when you or a reader shares it to social media.

## Social Share Optimization In Gatsby

Social media sites use meta tags provided by a webpage to determine what content should appear as the page title, description, link and image in a linked post.

My portfolio is built in Gatsby so I&apos;m using `React Helmet` to add meta tags between the `&lt;head&gt;` tags on my articles and pages.

To install React Helmet as a Gatsby plugin, install `gatsby-plugin-react-helmet` and `react-helmet`:

```shell
npm install gatsby-plugin-react-helmet react-helmet
```

Then, add the plugin to your `plugins` array in `gatsby-config.js`:

    {
      plugins: [`gatsby-plugin-react-helmet`]
    }

`React Helmet` gives you a `&lt;Helmet&gt;` component that passes its children as changes to the document head.

```jsx
import React from &quot;react&quot;
import { Helmet } from &quot;react-helmet&quot;

function Layout(props) {
  const { title, description, oGraphUrl } = props

  return (
    &lt;div id=&quot;application&quot;&gt;
      &lt;Helmet&gt;
        &lt;meta
          property=&quot;og:title&quot;
          content={title}`}
        /&gt;
        &lt;meta property=&quot;og:description&quot; content={description} /&gt;
        &lt;meta
          property=&quot;og:image&quot;
          content={
            !oGraphUrl || oGraphUrl === &quot;&quot;
              ? `${siteUrl}/rezacdev.png`
              : `${siteUrl}${oGraphUrl}`
          }
        /&gt;
        &lt;meta name=&quot;twitter:title&quot; content={title} /&gt;
        &lt;meta name=&quot;twitter:description&quot; content={description} /&gt;
        &lt;meta
          name=&quot;twitter:image&quot;
          content={
            !oGraphUrl || oGraphUrl === &quot;&quot;
              ? `${siteUrl}/rezacdev.png`
              : `${siteUrl}${oGraphUrl}`
          }
        /&gt;
        &lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
      &lt;/Helmet&gt;
    &lt;/div&gt;
  )
};
```
</content:encoded></item><item><title><![CDATA[Continuous Deployment of a Gatsby site to cPanel with Git Version Control]]></title><description><![CDATA[<p>Hosting a static site like one built in Gatsby on virtual shared hosting server makes sense, but the solution doesn't have to rely on FTP to deploy changes to the live site. See how to set up continuous deployment using cPanel's Git Version Control.</p>]]></description><link>https://www.rezac.dev/server/continuous-deployment-of-a-gatsby-site-to-cpanel-with-git-version-control/</link><guid isPermaLink="false">https://www.rezac.dev/server/continuous-deployment-of-a-gatsby-site-to-cpanel-with-git-version-control/</guid><pubDate>Sun, 01 Nov 2020 21:50:00 GMT</pubDate><content:encoded>
Last weekend, I launched my developer portfolio site at [www.rezac.dev](https://www.rezac.dev &quot;rezac.dev&quot;). I built the site in [Gatsby](https://www.gatsbyjs.com/ &quot;Gatsby&quot;) because I was excited to play with a static-site generator and Gatsby is React-based. My last project, [Bout Manager](https://www.rezac.dev/projects/bout-manager &quot;Bout Manager&quot;), was built in React so choosing a React-based generator encouraged me to focus on mastering Gatsby specifically and [Tailwind CSS](https://tailwindcss.com/ &quot;Tailwind CSS&quot;), the two tools I was hoping this project would add to my repertoire.

When it came time to deploy my site, I decided to stick with the virtual shared hosting account I&apos;ve had for more than a decade. My portfolio is likely to be deployed for a long time, so I couldn&apos;t really justify spinning it out in a different cloud-based location than all of the other websites I host and manage. There is plenty of time for me to familiarize myself with cloud-based deployment solutions.

To deploy a Gatsby site using cPanel, we&apos;ll need to build a Gatsby site, create a home for it on cPanel, and create a Git repository on cPanel using Git Version Control.

## Create a Gatsby site

Begin by creating a Gatsby site, you can use Gatsby&apos;s [Quick Start guide](https://www.gatsbyjs.com/docs/quick-start/ &quot;Gatsby Quick Start Guide&quot;) to get up and running pretty quickly. I started mine with [Melanie Nolan&apos;s Gatsby-Starter-Tailwind-CSS](https://www.gatsbyjs.com/starters/melanienolan/gatsby-starter-tailwind-css/ &quot;gatsby-starter-tailwind-css&quot;).

```bash
$ gatsby new gatsby-cpanel-deploy https://github.com/melanienolan/gatsby-starter-tailwind-css
```

Test your installation with:

```bash
$ cd gatsby-cpanel-deploy
$ gatsby develop
```

## Define deployment instructions for cPanel

Next, create a `html•.cpanel.yml` file in your project directory with deployment instructions.

```yaml
---
deployment:
  tasks:
    - export DEPLOYPATH=/home/&lt;userName&gt;/&lt;public_html&gt;/
    - /bin/cp -R public/* $DEPLOYPATH
```

- Line 1 is the beginning of a YAML file.
- Lines 2 and 3 add `html•deployment` and `html•tasks` keys.
- Line 4 begins a list of BASH commands that run during deployment.

The first BASH command defines a variable, `html•DEPLOYPATH` that holds the path on our server where deployed files will be located.

Replace `html•&lt;userName&gt;` with your account username and `html•&lt;public_html&gt;` with the location of your files in your site directory. For many deployment cases, this is likely to be `html•public_html`, but I am deploying to a subfolder of a subdomain on an add-on domain within my account, so my path will be to `html•demos.rezac.dev/gatsby-cpanel-deploy`.

The second BASH command deploys a specified file or directory to the directory defined in `html•$DEPLOYPATH`. When you run `bash•gatsby build`html•, Gatsby will automatically write all files to the `html•public/` folder, so `html•public/*` deploys all files in that directory.

## Build your Gatsby site

Run `bash•gatsby build` to create your site&apos;s build files and `html•public` folder and `html•gatsby serve` to check your build.

Push changes to your repo. By default, many Gatsby starters add `html•public` to `html•.gitignore`, so you&apos;ll need to remove it for Git Version Control to eventually be able to access those files from your repo.

## Set up Git Version Control

With deployment instructions defined in `html•.cpanel.yml` and the site&apos;s build pushed to our GitHub repository, we&apos;re ready to set up a second remote repository in cPanel using Git Version Control.

- First, grab your GitHub repository clone URL from your repo on GitHub by clicking the `html•Code` button and copying the URL. I prefer to use the HTTPS URL.
- Next, go go to `html•Git Version Control` from cPanel and click the `html•Create` button.
- Enable the toggle to clone a repository.
- Enter your copied clone URL in the clone URL field.
- Enter a path for repostiroy directory. I store mine in a directory named after the GitHub repository in a `html•repositories` directory in my site files.
- Enter a respository name.
- Click `html•Create`.

## Deploy from Git Version Control

To deploy for the first time, click the `html•Manage` button next to your new repo in the repositories list in Git Version Control.

Click the `html•Pull or Deploy` tab and then the `html•Deploy HEAD Commit` button.

Git Version Control will immediately queue the deployment and will add Last Deployment Information when the deployment is complete.

## Set up continuous deployment to Git Version Control in your local repository

As you push changes to your repository on GitHub, you can return to the `html•Pull or Deploy` tab for your repository in Git Version Control and click `html•Update from Remote` followed by `html•Deploy HEAD Commit` to make changes live on your site.

This may feel too cumbersome as it requires pushing changes to GitHub, logging in to cPanel, and manually starting two processes before changes are live. An easier solution would be to set up a continuous deployment pipeline in your local repository, and with Git Version Control this is possible.

Copy the clone URL for your Git Version Control repo from the repo&apos;s `html•Basic Information` tab.

In your local repository, run:

```bash
$ git remote add &lt;remoteName&gt; &lt;cloneUrl&gt;
```

where `html•&lt;remoteName&gt;` is a unique name for your new remote – I usually name this remote `html•cpanel` whereas the GitHub remote is named `html•origin` – and `html•&lt;cloneUrl&gt;` is the clone URL you coppied from Git Version Control.

You can check if the command has worked using `git remote -v` which will list your established remotes.

```bash
$ git remote -v
cpanel  &lt;cpanel clone url&gt; (fetch)
cpanel  &lt;cpanel clone url&gt; (push)
origin  &lt;github clone url&gt; (fetch)
origin  &lt;github clone url&gt; (push)
```

Now, your deployment cycle will look like this:

```bash
$ gatsby build
$ git add .
$ git commit -m &quot;Update build&quot;
$ git push origin main
$ git push cpanel main
```

Git Version Control will show its progress in your terminal window as it completes the deployment:

```bash
Enumerating objects: 32, done.
Counting objects: 100% (32/32), done.
Delta compression using up to 4 threads
Compressing objects: 100% (18/18), done.
Writing objects: 100% (19/19), 15.08 KiB | 3.77 MiB/s, done.
Total 19 (delta 11), reused 0 (delta 0)
remote: Recieved update on checked-out branch, queueing deployment.
remote: ---
remote: apiversion: 3
remote: func: create
remote: module: VersionControlDeployment
remote: result:
remote:   data:
remote:     deploy_id: 17
remote:     log_path: /home/cranewif/.cpanel/logs/vc_1604266002.21772_git_deploy.log
remote:     repository_root: /home/cranewif/repositories/gatsby-cpanel-deploy
remote:     sse_url: /sse/UserTasks/00000000_5f9f2812355a77/vc_1604266002.21772_git_deploy.log
remote:     task_id: 00000000/5f9f2812355a77
remote:     timestamps:
remote:       queued: &apos;1604266002.23371&apos;
remote:   errors: ~
remote:   messages: ~
remote:   metadata: {}
remote:
remote:   status: 1
remote:   warnings: ~
To ssh://jlrezac.com/home/cranewif/repositories/gatsby-cpanel-deploy
   494f663..57b1676  main
```

In theory, you could also set up your cPanel remote in the `html•public` folder, but keep in mind that `html•gatsby build` erases the contents of the `html•public` folder every time it runs, so you would need to keep your `html•.cpanel.yml` file in the same directory as your Gatsby files and copy it along with `html•.gitignore` over each time you re-built your site. I&apos;m interested in this solution, so if you try it, let me know how it works out for you!

This is my first real post on Dev.to. I&apos;m excited to hear what you think!
</content:encoded></item><item><title><![CDATA[Filling Sandboxes]]></title><description><![CDATA[As I lean into learning a new skill, I'm re-learning how to be a student.]]></description><link>https://www.rezac.dev/personal/filling-sandboxes/</link><guid isPermaLink="false">https://www.rezac.dev/personal/filling-sandboxes/</guid><pubDate>Thu, 30 May 2019 22:40:32 GMT</pubDate><content:encoded>
Obsessed with productivity hacks — to an *un*productive fault — I schedule every half-hour block of my day in a written planner. [This year’s planner](https://www.livewhaleplanner.com/) includes a space labeled for affirmations and insights. I keep a record of ideas that have inspired me or disrupted my thinking throughout the week. On April 17, I took note:

&gt; “I’m writing a first draft and reminding myself that I’m simply shoveling sand into a box so that later I can build castles.” — Shannon Hale

I read this on an English teacher’s wall. I was about 10 days in to the pre-work before my Online Software Engineering program began, and I felt like I was only shoveling sand.

As I lean into learning a new skill, I’m re-learning how to be a student. That’s fun and frustrating at the same time. Sometimes, it feels tedious — like filling a sandbox with sand (I didn’t know until I was a parent that sand is actually pretty dang heavy and filling a sandbox is a chore).

But, there are so many reasons I’m ready to learn back-end developing:

![](https://cdn-images-1.medium.com/max/1440/0*6B70XMItrXPfeoqj#max-width=500px;float=left;padding-right=10px;) Photo by [Goran Ivos](https://unsplash.com/@goran_ivos) on [Unsplash](https://unsplash.com)

### Practically Speaking,

I like the technical side of the front-end work I do a lot and my career path gets a little more technical any time I have a choice about which direction to take.

I started writing HTML in 2000 because I wanted to customize my diary. Very quickly, I was criticizing the code of the boy who helped me when I was learning for not being W3C validated. When I chose a career path, I didn’t want to corrupt what I found fun about web design by turning it into a job. I shied away from formal coursework because I knew what it felt like to be the only girl in the IRC channel (and bi, no less! Literally, the slang for me is _unicorn_). I didn’t want to deal with a bunch of 19-year-old boys in-person in a classroom.

Still, I’ve freelanced and taken on countless work projects that let me show off my HTML and CSS skills. By 2016, my b.a. in History and m.a. in Museum Science had lead me to the role of Director of Digital Engagement at the American Jazz Museum. And I loved having use of my digital skillset centered in my day to day work.

Where I was once annoyed by 1337 boys, I found myself adept at guiding a whole team of them through developing a new Drupal site for the museum— yet again, I’m the queen of “Hey, have you ever heard of QA? Think you might want to try it?” — and on-boarding a staff of mostly tech-resistant people to a new database and email system was actually fun.

When I left that role, I became the website/digital marketing specialist at an independent school where I have even more authority to design, develop, and tinker. I find myself taking mental breaks by doing more technical web work. So, it’s time to add more advanced skills to my sandbox. And, so far, I love it. I may have clapped and squealed a little the first time I got to parse raw text to files. From my days as a teenage clerk in the sports department of a newsroom, I’ve been great at converting a poorly formatted Doc into a manipulable Excel file to turn it back into raw agate for print.

But my interest in coding is more than that.

![](https://cdn-images-1.medium.com/max/1440/0*4Z1XEm4Ne4h4KZOJ#max-width=500px;float=right;padding-left=10px)Photo by [T. Chick McClure](https://unsplash.com/@tchickmcclure) on [Unsplash](https://unsplash.com)

### On a more motivating level,

I’ve seen how software designed without concern for social consequence can have very damaging social consequences. More and more, code is what our world is built on. I want coders to reflect our population better. That means we need more women who can code, more queer people who can code. And I can represent myself.

I’ve seen how powerful organizations that make their money on developing software have become. I want developers to understand their power in what gets built. I want to be part of organizing within the developer community. Related, I want to be a coder who is available to community organizers for social justice projects.

So, for now, I’m committed to filling this sandbox. And I’m dreaming about the castles I’ll be able to build (and tear down) in the future.

Hero photo by [Markus Spiske](https://unsplash.com/@markusspiske) on [Unsplash](https://unsplash.com)
</content:encoded></item></channel></rss>